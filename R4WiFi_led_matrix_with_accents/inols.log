






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":14140,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17302

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":14140,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17302

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":14140,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17302

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":14140,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17302

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":14140,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17302

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":27224,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17353

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\n//uint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\nchar banner_text[32] = \"  Arduino UNO R4 WiFi\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":27224,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17353

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\n//uint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\nchar banner_text[32] = \"  Arduino UNO R4 WiFi\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":27224,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17353

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\n//uint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\nchar banner_text[32] = \"  Arduino UNO R4 WiFi\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":27224,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17353

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\n//uint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\nchar banner_text[32] = \"  Arduino UNO R4 WiFi\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":27224,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17353

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\n//uint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\nchar banner_text[32] = \"  Arduino UNO R4 WiFi\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":17932,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":17932,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":17932,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":17932,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":17932,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":34976,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":34976,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":34976,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":34976,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":34976,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  4, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  2, 0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3114

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":8640,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  2, 0b00001000, 0b00001000, 0b00000000, 0b00000000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  1, 0b00010100, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3114

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":8640,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  2, 0b00001000, 0b00001000, 0b00000000, 0b00000000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  1, 0b00010100, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3114

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":8640,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  2, 0b00001000, 0b00001000, 0b00000000, 0b00000000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  1, 0b00010100, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3114

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":8640,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  2, 0b00001000, 0b00001000, 0b00000000, 0b00000000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  1, 0b00010100, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3114

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":8640,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  2, 0b00001000, 0b00001000, 0b00000000, 0b00000000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  1, 0b00010100, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":43192,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  2, 0b00001000, 0b00001000, 0b00000000, 0b00000000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  1, 0b00010100, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":43192,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  2, 0b00001000, 0b00001000, 0b00000000, 0b00000000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  1, 0b00010100, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":43192,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  2, 0b00001000, 0b00001000, 0b00000000, 0b00000000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  1, 0b00010100, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":43192,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  2, 0b00001000, 0b00001000, 0b00000000, 0b00000000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  1, 0b00010100, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}






Started logging.

<<<
Content-Length: 3115

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":43192,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"i:\\PaulskPt\\Arduino-UNO-R4\\R4WiFi_led_matrix_with_accents","rootUri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents","name":"R4WiFi_led_matrix_with_accents"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.4"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 17251

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///i%3A/PaulskPt/Arduino-UNO-R4/R4WiFi_led_matrix_with_accents/R4WiFi_led_matrix_with_accents.ino","languageId":"cpp","version":1,"text":"/*\r\n * Purpose: Display a text message scrolling from right to left \r\n *          on the board's 8x12 LED matrix.\r\n * Board: Arduino UNO R4 WiFi\r\n * IDE: 1.8.19 with \"Arduino Renesas Boards\" version 0.8.5-ea\r\n *\r\n * Usage: Upload to the board and enjoy.\r\n * \r\n * Provides many possibilities for doing things better and more efficiently.\r\n * Parts of this code work because of the way the display works. For instance,\r\n * there is no need to draw black pixels, only white pixels need drawing.\r\n * Naively porting this code to another kind of display will probably not work.\r\n * Buffer overflow protection is probably flawed, so don't count on it.\r\n *\r\n * By: Clemens Valens, Elektor\r\n * Date: 14/6/2023\r\n *\r\n * Modified by: Paulus H.J. Schulinck, Github @paulskpt\r\n * Added code for using some characters with accents (a´, ç, í, ó, ô. More to add).\r\n * For better accenting, e.g. for accent-circumflex, it had been better to have characters\r\n * to be 5 columns wide.\r\n * Date: 12/8/2023\r\n */\r\n\r\n#ifdef my_debug\r\n#undef my_debug\r\n#endif\r\n// #define my_debug  (1)\r\n\r\n// Leading spaces ensure starting at the right.\r\nuint8_t banner_text[] = \"  Arduino UNO R4 WiFi á í ó ô ç\";\r\n\r\n// First value is the width of a character in columns. This allows for\r\n// easy tight spacing on the display (TTF kind of thing).\r\n\r\n// 4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á\r\n\r\nbool accent_flag = false;\r\n\r\nconst uint8_t font_5x8[] = \r\n{\r\n  3, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space  32   offset 0\r\n  1, 0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !             6\r\n  3, 0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // \"            12\r\n  5, 0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #            18\r\n  4, 0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $            24\r\n  5, 0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %            30\r\n  5, 0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &            36\r\n  1, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '            42\r\n  3, 0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // ( 40         48\r\n  3, 0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )            54\r\n  5, 0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *            60\r\n  5, 0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +            66\r\n  2, 0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,            72\r\n  2, 0b00001000, 0b00001000, 0b00000000, 0b00000000, 0b00000000, // -            78\r\n  2, 0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .            84\r\n  4, 0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /            90\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0            96\r\n  3, 0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1           102\r\n  4, 0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2 50        108\r\n  4, 0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3           114\r\n  4, 0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4           120\r\n  4, 0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5           126\r\n  4, 0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6           132\r\n  4, 0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7           138\r\n  4, 0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8           144\r\n  4, 0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9           150\r\n  1, 0b00010100, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :           156\r\n  2, 0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;           162\r\n  3, 0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // < 60        168\r\n  3, 0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =           174\r\n  3, 0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >           180\r\n  4, 0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?           186\r\n  5, 0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @           192\r\n  4, 0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A           198\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B           204\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C           210\r\n  4, 0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D           216\r\n  4, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E           222\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F 70        228\r\n  4, 0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G           234\r\n  4, 0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H           240\r\n  3, 0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I           246\r\n  4, 0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J           252\r\n  4, 0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K           258\r\n  4, 0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L           264\r\n  5, 0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M           270\r\n  5, 0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N           276\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O           282\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P 80        288\r\n  4, 0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q           294\r\n  4, 0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R           300\r\n  4, 0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S           306\r\n  5, 0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T           312\r\n  4, 0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U           318\r\n  5, 0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V           324\r\n  5, 0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W           330\r\n  5, 0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X           336\r\n  5, 0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y           342\r\n  4, 0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z 90        348\r\n  2, 0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [           354\r\n  4, 0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // '\\'         360\r\n  2, 0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]           366\r\n  3, 0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat         372\r\n  4, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _           378\r\n  2, 0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `           384\r\n  4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b           396\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d 100       408\r\n  4, 0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e           414\r\n  3, 0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f           420\r\n  4, 0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g           426\r\n  4, 0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h           432\r\n  3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j           444\r\n  4, 0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k           450\r\n  3, 0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l           456\r\n  5, 0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m           462\r\n  4, 0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n 110       468\r\n  4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p           480\r\n  4, 0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q           486\r\n  4, 0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r           492\r\n  4, 0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s           498\r\n  3, 0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t           504\r\n  4, 0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u           510\r\n  5, 0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v           516\r\n  5, 0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w           522\r\n  5, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x 120       528\r\n  4, 0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y           534\r\n  3, 0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z           540\r\n  3, 0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {           546\r\n  1, 0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |           552\r\n  3, 0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }           558      \r\n  4, 0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, //             564\r\n  4, 0b00100000, 0b01010110, 0b01010101, 0b01111000, 0b00000000, // á 127       570      = 95 * 6       Original: 4, 0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a           390\r\n  4, 0b00111000, 0b01000100, 0b11000100, 0b00000000, 0b00000000, // ç 128       576      = 96 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00000000, 0b00000000, // c           402\r\n  3, 0b01000100, 0b01111110, 0b01000001, 0b00000000, 0b00000000, // í 129       582      = 96 * 6       Original: 3, 0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i           438\r\n  4, 0b00111000, 0b01000100, 0b01000110, 0b00111001, 0b00000000, // ó 130       588      = 97 * 6       Original: 4, 0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o           474\r\n  4, 0b00110010, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // ô 131       594      = 98 * 6       Original: 4, idem\r\n};\r\n\r\n// LED matrix info.\r\nconst uint8_t led_matrix_pin_first = 28;\r\nconst uint8_t led_matrix_pin_last = 38;\r\nconst uint8_t led_matrix_pin_count = led_matrix_pin_last - led_matrix_pin_first + 1;\r\nconst uint8_t led_matrix_rows = 8;\r\nconst uint8_t led_matrix_cols = 12;\r\n\r\n// Pixel-to-pin translation table.\r\n// A HEX value encodes two pin numbers. The MSB is to be driven LOW,\r\n// the LSB is to be driven HIGH.\r\n// Example: pixel (4,2) contains the value 0x60, meaning that pin 6 must\r\n// be driven low and pin 0 must be driven high to activate the pixel.\r\n// The pin number is an offset to the constant led_matrix_pin_first\r\n// Note that they all appear in pairs, so you could make the table 50%\r\n// smaller at the cost of doing some swapping for odd or even columns.\r\n// (0,0) is upper left corner when the board's USB connector points to the left.\r\nconst uint8_t led_matrix_pins[led_matrix_rows][led_matrix_cols] =\r\n{\r\n  //  0     1     2     3     4     5     6     7     8     9    10     11\r\n  { 0x37, 0x73, 0x47, 0x74, 0x43, 0x34, 0x87, 0x78, 0x83, 0x38, 0x84, 0x48 }, // 0\r\n  { 0x07, 0x70, 0x03, 0x30, 0x04, 0x40, 0x08, 0x80, 0x67, 0x76, 0x63, 0x36 }, // 1\r\n  { 0x64, 0x46, 0x68, 0x86, 0x60, 0x06, 0x57, 0x75, 0x53, 0x35, 0x54, 0x45 }, // 2\r\n  { 0x58, 0x85, 0x50, 0x05, 0x56, 0x65, 0x17, 0x71, 0x13, 0x31, 0x14, 0x41 }, // 3\r\n  { 0x18, 0x81, 0x10, 0x01, 0x16, 0x61, 0x15, 0x51, 0x27, 0x72, 0x23, 0x32 }, // 4\r\n  { 0x24, 0x42, 0x28, 0x82, 0x20, 0x02, 0x26, 0x62, 0x25, 0x52, 0x21, 0x12 }, // 5\r\n  { 0xa7, 0x7a, 0xa3, 0x3a, 0xa4, 0x4a, 0xa8, 0x8a, 0xa0, 0x0a, 0xa6, 0x6a }, // 6\r\n  { 0xa5, 0x5a, 0xa1, 0x1a, 0xa2, 0x2a, 0x97, 0x79, 0x93, 0x39, 0x94, 0x49 }, // 7\r\n};\r\n\r\n// Every byte represents a column of the LED matrix.\r\n// Can hold 32 5x8-font characters.\r\n// Buffer can be smaller at the price of more code.\r\nuint8_t led_matrix_buffer[5*32];\r\n\r\n// Activate the pixel at (x,y) for ontime microseconds.\r\nvoid put_pixel(uint8_t x, uint8_t y, uint32_t ontime)\r\n{\r\n  uint8_t pins = led_matrix_pins[y][x];\r\n  uint8_t l = (pins>>4) + led_matrix_pin_first;\r\n  uint8_t h = (pins&0xf) + led_matrix_pin_first;\r\n  pinMode(l,OUTPUT);\r\n  digitalWrite(l,LOW);\r\n  pinMode(h,OUTPUT);\r\n  digitalWrite(h,HIGH);\r\n  // If ontime = 0, pixel remains active until it is deactivated\r\n  // by another put_pixel that happens to use the same pin(s).\r\n  if (ontime!=0)\r\n  {\r\n    delayMicroseconds(ontime);\r\n    pinMode(l,INPUT);\r\n    pinMode(h,INPUT);\r\n  }\r\n}\r\n\r\n// Call periodically at desired fps rate.\r\n// ontime specifies how long a pixel remains on.\r\nvoid led_matrix_buffer_show(uint32_t x_offset, uint32_t ontime)\r\n{\r\n  for (uint8_t i=0; i<led_matrix_cols; i++)\r\n  {\r\n    if (i+x_offset>=sizeof(led_matrix_buffer)) return;\r\n    uint8_t col = led_matrix_buffer[i+x_offset];\r\n    for (uint8_t row=0; row<led_matrix_rows; row++)\r\n    {\r\n      if ((col&0x01)!=0)\r\n      {\r\n        put_pixel(i,row,ontime);\r\n      }\r\n      col >>= 1;\r\n    }\r\n  }\r\n}\r\n\r\n// Write a character to the buffer.\r\nuint8_t led_matrix_putch(uint8_t *p_buffer, uint16_t buffer_size, uint8_t ch)\r\n{\r\n  uint8_t i;\r\n  \r\n  if (ch<' ') return 0;\r\n  ch -= ' ';\r\n  #ifdef my_debug\r\n  Serial.print(\"ch= \");\r\n  Serial.print(ch);\r\n  Serial.print(\"= \");\r\n  Serial.println(ch+' ');\r\n  #endif\r\n  \r\n  uint16_t offset = 0;\r\n  if (ch == 163)  // Check for accent value indicator\r\n  {\r\n    accent_flag = true; // set flag because an accent char comes with 2 bytes\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (accent_flag == true) return 0;  // it's a ch with an accent: get the next ch\r\n  }\r\n  if (accent_flag == true)\r\n  {\r\n    accent_flag = false; // reset flag\r\n  #ifdef my_debug\r\n    Serial.print(\"accent_flag= \");\r\n    Serial.println(accent_flag);\r\n  #endif\r\n    if (ch == 129)\r\n      ch = 127; // index for á\r\n    else if (ch == 135)\r\n      ch = 128; // index for ç\r\n    else if (ch == 141)\r\n      ch = 129; // index for í\r\n    else if (ch == 147)\r\n      ch = 130; // index for ó\r\n    else if (ch == 148)\r\n      ch = 131; // index for ô\r\n    else\r\n      ch= 32; // set index for a space\r\n    offset = 6*(ch-32);  // e.g. if ch is 127 then offset is 6*(127-32) = 6*95 = 570\r\n  }\r\n  else \r\n  {\r\n    offset = 6*ch;\r\n  }\r\n  #ifdef my_debug\r\n  Serial.print(\"ch after correction= \");\r\n  Serial.println(ch);\r\n  Serial.print(\"offset = \");\r\n  Serial.println(offset);\r\n  #endif\r\n  uint8_t width = font_5x8[offset];\r\n  for (i=0; i<width; i++) \r\n  { \r\n    offset += 1;\r\n    // This is supposed to prevent buffer overflow.\r\n    if (i>=buffer_size) break;\r\n    p_buffer[i] = font_5x8[offset];\r\n  }\r\n  return i+1;\r\n}\r\n\r\n// Write a string to the buffer.\r\nuint16_t led_matrix_puts(uint8_t *p_buffer, uint16_t buffer_size, uint8_t *p_str)\r\n{\r\n  uint8_t *p = p_buffer;\r\n  while (*p_str!=0)\r\n  {\r\n    p += led_matrix_putch(p,buffer_size-(p-p_buffer),*p_str);\r\n    p_str++;\r\n  }\r\n  return p - p_buffer;\r\n}\r\n\r\nuint32_t t_prev = 0;\r\n\r\nvoid setup(void)\r\n{\r\n#ifdef my_debug\r\n  Serial.begin(115200);\r\n#endif\r\n  // Initialize LED matrix pins.\r\n  for (uint8_t i=0; i<led_matrix_pin_count; i++)\r\n  {\r\n    pinMode(led_matrix_pin_first+i,INPUT); // all off\r\n  }\r\n  // Load text message.\r\n  led_matrix_puts(led_matrix_buffer,sizeof(led_matrix_buffer),banner_text);\r\n  // Ready...\r\n  t_prev = millis();\r\n  // Go!\r\n}\r\n\r\nvoid loop(void)\r\n{\r\n  // Scroll speed is determined by both scroll_speed and ontime.\r\n  const uint8_t scroll_speed = 50; // milliseconds\r\n  const uint16_t ontime = 521; // microseconds. 521 (us) * 96 (pixels) = 50 ms frame rate if all the pixels are on.\r\n  static uint8_t scroll = 0; // scroll position.\r\n\r\n  // Refresh display.\r\n  led_matrix_buffer_show(scroll,ontime);\r\n\r\n  // Update scroll position.\r\n  if (millis()>=t_prev+scroll_speed)\r\n  {\r\n    t_prev = millis();\r\n    scroll += 1; // Scroll to the left.\r\n    if (scroll>5*strlen((char*)banner_text)) scroll = 0; // restart\r\n  }\r\n}\r\n"}}}